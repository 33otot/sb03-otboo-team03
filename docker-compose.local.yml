services:
  # PostgreSQL 데이터베이스 서비스
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PG_EXTERNAL_PORT:-5432}:${POSTGRES_PORT:-5432}"
    volumes:
      - otboo-postgres:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otboo-network
    restart: unless-stopped

  # Redis 캐시 서비스
  redis:
    image: redis:7.2-alpine
    ports:
      - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    volumes:
      - otboo-redis:/data
    command: ["redis-server","--appendonly","yes","--bind","0.0.0.0","--protected-mode","no"]
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispass}", "PING" ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s
    networks:
      - otboo-network
    restart: unless-stopped

  # Kafka 로그 디렉토리 권한 초기화용 서비스 (일회성 실행)
  init-kafka-perms:
    image: busybox
    command: chown -R 1000:1000 /var/lib/kafka-logs
    volumes:
      - otboo-kafka:/var/lib/kafka-logs
    entrypoint: [ "sh", "-c", "chown -R 1000:1000 /var/lib/kafka-logs" ]
    restart: "no"

  # kafka 서비스 (로컬 단일 노드)
  kafka:
    image: apache/kafka:3.8.0
    user: "1000:1000"  # 비루트로 실행
    depends_on:
      init-kafka-perms:
        condition: service_completed_successfully
    ports:
      - "9092:9092"
    environment:
      # ---- 리스너/프로토콜 매핑 ----
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      # ---- 광고 리스너 (클라이언트가 보는 주소) ----
      # 내부 컨테이너는 kafka:29092, 호스트는 localhost:9092 로 접속
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # ---- KRaft 단일 노드 ----
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # ---- 바인딩 리스너 (컨테이너 내부 바인딩 주소) ----
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # ---- 단일 노드 안전값 ----
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # ---- 스토리지/메모리 ----
      KAFKA_LOG_DIRS: /var/lib/kafka-logs
      KAFKA_HEAP_OPTS: ${KAFKA_HEAP_OPTS:--Xmx512m -Xms256m}
    volumes:
      - otboo-kafka:/var/lib/kafka-logs
    healthcheck:
      # 호스트용과 내부용 모두 체크
      test: [ "CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1 && kafka-broker-api-versions.sh --bootstrap-server kafka:29092 | grep -q 'id=1'" ]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s
    networks:
      - otboo-network
    restart: unless-stopped

  # nginx 리버스 프록시 서비스
  nginx:
    build:
      context: .
      dockerfile: ./nginx/Dockerfile
    volumes:
      # 로컬의 ./nginx/conf.d 디렉토리를 컨테이너의 /etc/nginx/conf.d 디렉토리에 읽기 전용으로 마운트
      - ./nginx/conf:/etc/nginx/conf.d:ro
    ports:
      - "3000:80"
    depends_on:
      - app
    networks:
      - otboo-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost/nginx_status" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Elasticsearch 서비스
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.13.4
    container_name: elasticsearch
    environment:
      - discovery.type=single-node
      - ES_JAVA_OPTS=-Xms512m -Xmx512m
      - xpack.security.enabled=false # 보안 비활성화
      - xpack.security.http.ssl.enabled=false # SSL 비활성화
      - xpack.security.enrollment.enabled=false # 등록 비활성화
      - bootstrap.memory_lock=true # 메모리 잠금 활성화
      - xpack.monitoring.collection.enabled=true # 모니터링 활성화
    ulimits:
      memlock:
        soft: -1
        hard: -1
    cap_add:
      - IPC_LOCK
    volumes:
      - esdata:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - otboo-network
    healthcheck:
      test: ["CMD-SHELL", "curl -sf 'http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    command: >
      /bin/bash -c "
        if [ ! -f /usr/share/elasticsearch/plugins/analysis-nori/plugin-descriptor.properties ]; then
          echo 'Installing analysis-nori plugin...' && \
          bin/elasticsearch-plugin install --batch analysis-nori || {
            echo 'Failed to install nori plugin'; 
            exit 1; 
          };
        fi;
        /usr/local/bin/docker-entrypoint.sh;
      "
  # Kibana 서비스 (필요시 활성화)
  kibana:
    image: docker.elastic.co/kibana/kibana:8.13.4
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      - xpack.encryptedSavedObjects.encryptionKey=fhjskloppd678ehkdfdlliverpoolfcr
    ulimits:
      memlock:
        soft: -1
        hard: -1
    ports:
      - "5601:5601"
    networks:
      - otboo-network
    depends_on:
      elasticsearch:
        condition: service_healthy

  # 로컬에서만 app 의존성 연결
  app:
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
      elasticsearch:
        condition: service_healthy

volumes:
  otboo-postgres:
    driver: local
    name: samsamotot-postgres
  otboo-redis:
    driver: local
    name: samsamotot-redis
  otboo-kafka:
    driver: local
    name: samsamotot-kafka
  esdata:
    driver: local
    name: samsamotot-esdata