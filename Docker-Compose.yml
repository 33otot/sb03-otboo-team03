services:
  # 애플리케이션 서비스
  app:
    platform: linux/amd64
    build:
      context: .
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE:-dev}
      POSTGRES_HOST: ${POSTGRES_HOST:-postgres}
      POSTGRES_PORT: ${POSTGRES_PORT:-5432}
      POSTGRES_DB: ${POSTGRES_DB:-otboo}
      POSTGRES_USER: ${POSTGRES_USER:-otboo_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      KMA_ENCODING_KEY: ${KMA_ENCODING_KEY}
      KMA_DECODING_KEY: ${KMA_DECODING_KEY}
      AUTH_KEY: ${AUTH_KEY}
      KAKAO_API_KEY: ${KAKAO_API_KEY}
      JVM_OPTS: ${JVM_OPTS:--Xmx512m -Xms256m}
      SERVER_PORT: ${APP_INTERNAL_PORT:-8080}   # 컨테이너 내부 포트 = 서버 포트
      # JWT 설정
      JWT_SECRET: ${JWT_SECRET:-otboo-jwt-secret-key-for-development-only-change-in-production}
      JWT_ACCESS_TOKEN_EXPIRATION: ${JWT_ACCESS_TOKEN_EXPIRATION:-3600000}
      JWT_REFRESH_TOKEN_EXPIRATION: ${JWT_REFRESH_TOKEN_EXPIRATION:-604800000}
      JWT_ISSUER: ${JWT_ISSUER:-otboo}
      # 스토리지 설정
      STORAGE_TYPE: ${STORAGE_TYPE}
      # AWS S3 설정
      AWS_S3_ACCESS_KEY: ${AWS_S3_ACCESS_KEY}
      AWS_S3_SECRET_KEY: ${AWS_S3_SECRET_KEY}
      AWS_S3_REGION: ${AWS_S3_REGION}
      AWS_S3_BUCKET: ${AWS_S3_BUCKET}
      # Redis 설정
      REDIS_HOST: ${REDIS_HOST:-redis}
      REDIS_PORT: ${REDIS_PORT:-6379}
      REDIS_PASSWORD: ${REDIS_PASSWORD:-redispass}
      # Kafka 설정
      SPRING_KAFKA_BOOTSTRAP_SERVERS: broker:29092
    ports:
      - "${APP_EXTERNAL_PORT:-8080}:${APP_INTERNAL_PORT:-8080}" # 외부 포트와 내부 포트 매핑
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_started
    networks:
      - otboo-network
    restart: unless-stopped

  # PostgreSQL 데이터베이스 서비스
  postgres:
    image: postgres:17-alpine
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "${PG_EXTERNAL_PORT}:${POSTGRES_PORT}"
    volumes:
      - otboo-postgres:/var/lib/postgresql/data
      - ./src/main/resources/schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - otboo-network
    restart: unless-stopped

  # Redis 캐시 서비스
  redis:
    image: redis:7.2-alpine
    ports:
        - "${REDIS_EXTERNAL_PORT:-6379}:6379"
    volumes:
      - otboo-redis:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redispass}
    healthcheck:
      test: [ "CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispass}", "PING" ]
      interval: 5s
      timeout: 3s
      retries: 20
      start_period: 5s
    networks:
      - otboo-network
    restart: unless-stopped

  # Kafka 로그 디렉토리 권한 초기화용 서비스 (일회성 실행)
  init-kafka-perms:
    image: busybox
    command: chown -R 1000:1000 /var/lib/kafka-logs
    volumes:
      - otboo-kafka:/var/lib/kafka-logs
    entrypoint: ["sh", "-c", "chown -R 1000:1000 /var/lib/kafka-logs"]
    restart: "no"

  # kafka 서비스 (Apache Kafka 3.8.0, KRaft 모드 단일 노드)
  kafka:
    image: apache/kafka:3.8.0
    user: "1000:10000"  # 비루트로 실행
    depends_on:
      init-kafka-perms:
        condition: service_completed_successfully
    ports:
      - "9092:9092"
    environment:
      # ---- 리스너/프로토콜 매핑 ----
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      # ---- 광고 리스너 (클라이언트가 보는 주소) ----
      # 내부 컨테이너는 kafka:29092, 호스트는 localhost:9092 로 접속
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      # ---- KRaft 단일 노드 ----
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      # ---- 바인딩 리스너 (컨테이너 내부 바인딩 주소) ----
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:29092,CONTROLLER://0.0.0.0:29093,PLAINTEXT_HOST://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      # ---- 단일 노드 안전값 ----
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      # ---- 스토리지/메모리 ----
      KAFKA_LOG_DIRS: /var/lib/kafka-logs
      KAFKA_HEAP_OPTS: ${KAFKA_HEAP_OPTS:--Xmx512m -Xms256m}
    volumes:
      - otboo-kafka:/var/lib/kafka-logs
    healthcheck:
      # 호스트용과 내부용 모두 체크
      test: ["CMD-SHELL", "kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1 && kafka-broker-api-versions.sh --bootstrap-server kafka:29092 | grep -q 'id=1'"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 40s
    networks:
      - otboo-network
    restart: unless-stopped

# 볼륨 정의
volumes:
  otboo-postgres:
    driver: local
    name: samsamotot-postgres
  otboo-redis:
    driver: local
    name: samsamotot-redis
  otboo-kafka:
    driver: local
    name: samsamotot-kafka

# 네트워크 정의
networks:
  otboo-network:
    driver: bridge
    name: samsamotot-network