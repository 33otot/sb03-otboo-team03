# Nginx 리버스 프록시 설정(로컬 개발용)

# WebSocket/HTTP 업그레이드 제어
# - 업그레이드가 아니면 Connection 헤더를 비워 keepalive 유지
map $http_upgrade $connection_upgrade {
  default upgrade;
  ''      '';
}

# 백엔드 업스트림
# - 추후 확장 시 서버 추가
upstream spring_backend {
#   server app:8080;
#   keepalive 64;
    least_conn;
    server app1:8080 max_fails=3 fail_timeout=30s;
    server app2:8080 max_fails=3 fail_timeout=30s;
    keepalive 64;
}

server {
  listen 80;
  server_name localhost;

  # 공통 프록시 헤더/타임아웃
  proxy_http_version 1.1;
  proxy_set_header X-Real-IP $remote_addr;
  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
  proxy_set_header X-Forwarded-Proto $scheme;
  proxy_set_header Host $host;

  proxy_connect_timeout 30s;
  proxy_read_timeout 60s;
  proxy_send_timeout 60s;

  # 디버깅 편의
  sendfile off;
  gzip off;

  # --- API ---
  location /api/ {
    proxy_set_header Upgrade    $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    proxy_pass http://spring_backend;
    add_header X-Upstream-Server $upstream_addr always;
  }

  # --- WebSocket ---
  location /ws/ {
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $host;
    proxy_pass http://spring_backend;
    add_header X-Upstream-Server $upstream_addr always;
  }

  # --- Nginx 상태 확인---
  location /nginx_status {
    stub_status on;
    access_log off;
    allow 127.0.0.1;
    deny all;
  }

  location / {
    root /usr/share/nginx/html;
    index index.html;
    try_files $uri $uri/ /index.html;
  }

  # 로깅 간단히
  access_log /var/log/nginx/access.log;
  error_log  /var/log/nginx/error.log notice;
}