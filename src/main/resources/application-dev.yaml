spring:
  config:
    activate:
      on-profile: dev
    # .env 파일을 속성 소스로 추가
    import: optional:file:.env[.properties]
  
  # 개발환경에서 보안 자동설정 비활성화
  autoconfigure:
    exclude:
      - org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration
      - org.springframework.boot.actuate.autoconfigure.security.servlet.ManagementWebSecurityAutoConfiguration
  
  # PostgreSQL 데이터베이스 초기화
  sql:
    init:
      mode: always
      schema-locations: classpath:schema.sql
      continue-on-error: true
  devtools:
    restart:
      additional-exclude: "**/mapper/**/*MapperImpl.class"
      log-condition-evaluation-delta: true

  # PostgreSQL DB 접속 정보
  datasource:
    url: jdbc:postgresql://postgres:5432/otboo
    username: ${POSTGRES_USER}
    password: ${POSTGRES_PASSWORD}
    driver-class-name: org.postgresql.Driver

  # JPA 설정 (PostgreSQL용)
  jpa:
    open-in-view: false
    hibernate:
      ddl-auto: none  # schema.sql로 테이블 생성하므로 none
    properties:
      hibernate:
        show_sql: true
        default_batch_fetch_size: 100
        format_sql: true
        dialect: org.hibernate.dialect.PostgreSQLDialect

  # Batch 설정
  batch:
    jdbc:
      initialize-schema: always

management:
  endpoints:
    web:
      exposure:
        include: "*"
      base-path: /actuator
  endpoint:
    health:
      show-details: always
      show-components: always

otboo:
  storage:
    type: ${STORAGE_TYPE:local}
    #    local:
    #      root-path: ${STORAGE_LOCAL_ROOT_PATH:.otboo/storage}
    s3:
      access-key: ${AWS_S3_ACCESS_KEY}
      secret-key: ${AWS_S3_SECRET_KEY}
      region: ${AWS_S3_REGION}
      bucket: ${AWS_S3_BUCKET}

server:
  port: 8080