spring:
  application:
    name: Otboo
  profiles:
    active: prod
  devtools:
    restart:
      enabled: false
  servlet:
    multipart:
      maxFileSize: 10MB # 파일 하나의 최대 크기
      maxRequestSize: 30MB # 한 번에 최대 업로드 가능 용량
  cache:
    type: redis
    redis:
      enable-statistics: true

  kafka:
    bootstrap-servers: ${SPRING_KAFKA_BOOTSTRAP_SERVERS:kafka:29092}
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    consumer:
      group-id: ${SPRING_KAFKA_CONSUMER_GROUP_ID:otboo-group}
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
  elasticsearch:
    health-timeout-ms: 10000
    uris: elasticsearch:9200

  # LLM 설정 (OpenAI)
  ai:
    openai:
      connect-timeout: 5000
      read-timeout: 30000
      response-timeout: 90000
      api-key: ${OPENAI_API_KEY}
      base-url: ${OPENAI_BASE_URL:https://api.openai.com}
      chat:
        options:
          model: gpt-4o-mini
          temperature: 0.4
          max-tokens: 128
    retry:
      max-attempts: 3
      backoff:
        initial-interval: 1s
        multiplier: 2
        max-interval: 10s

  # OAuth2 클라이언트 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile, email
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            client-name: Google
          kakao:
            client-id: ${KAKAO_REST_API_KEY}
            client-secret: ${KAKAO_CLIENT_SECRET}
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            scope: profile_nickname, profile_image
            redirect-uri: "{baseUrl}/oauth2/callback/{registrationId}"
            client-name: Kakao
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id

kma:
  base-url: http://apis.data.go.kr/1360000/VilageFcstInfoService_2.0
  alt-url: https://apihub.kma.go.kr/api/typ02/openApi/VilageFcstInfoService_2.0
  service-key: ${AUTH_KEY}

kakao.api:
  base-url: https://dapi.kakao.com
  key: ${KAKAO_API_KEY}

# 비동기 실행 설정
async:
  executors:
    main:
      core-size: 4
      max-size: 8
      queue-capacity: 200
      keep-alive-seconds: 60
    weather:
      core-size: 5
      max-size: 10
      queue-capacity: 1000
      keep-alive-seconds: 60
    image:
      core-size: 3
      max-size: 10
      queue-capacity: 100
      keep-alive-seconds: 60

recommendation:
  cooldown:
    ttl:
      minutes: 30
  rollcount:
    ttl:
      days: 1
  score-threshold: 0.4

# 관리자 계정 초기화 설정
app:
  admin:
    email: ${ADMIN_EMAIL}
    username: ${ADMIN_USERNAME}
    password: ${ADMIN_PASSWORD}

websocket:
  allowed-origins: http://localhost:3000,http://localhost:8080

# LLM 설정
llm:
  reason:
    max-length: 60