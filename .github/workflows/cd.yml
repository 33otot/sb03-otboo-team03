name: Deploy to AWS ECS

# 트리거 조건: dev 브랜치에 푸쉬 시 자동 실행
on:
  push:
    branches: [ refactor/deploy ]
  workflow_dispatch:
    inputs:
      branch:
        description: '수동 실행 시 사용할 브랜치 이름'
        required: true
        default: 'dev'

env:
  IMAGE_TAG: ${{ github.sha }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build-image.outputs.image_uri }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public

      - name: Build and Push Docker image to Amazon ECR
        id: build-image
        env:
          ECR_URI: ${{ vars.ECR_REPOSITORY_URI }}
        run: |
          docker buildx build \
            -t $ECR_URI:${{ env.IMAGE_TAG }} \
            -t $ECR_URI:latest \
            --push .
          
          echo "image_uri=$ECR_URI:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: build-and-push
    outputs:
      new_task_def_arn: ${{ steps.register.outputs.new_task_def_arn }}

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ vars.AWS_REGION }}

      - name: Update ECS Task Definition with new image
        id: register
        run: |
          set -e  # 에러 발생 시 즉시 중단
          
          # 현재 태스크 정의
          echo "현재 태스크 정의 불러오는 중..."
          TASK_DEFINITION=$(aws ecs describe-task-definition \
            --task-definition ${{ vars.ECS_TASK_DEFINITION }})
          
          # 새 이미지 업데이트
          echo "새 이미지로 태스크 정의 수정 중...: ${{ needs.build-and-push.outputs.image_uri }}"
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq \
            --arg IMAGE "${{ needs.build-and-push.outputs.image_uri }}" \
            '.taskDefinition |
              .containerDefinitions[0].image = $IMAGE |
              del(.taskDefinitionArn, .revision, .status,
                  .requiresAttributes, .compatibilities,
                  .registeredAt, .registeredBy)')

          # 새 태스크 정의 등록
          echo "새 태스크 정의 등록 중..."
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json "$NEW_TASK_DEF" | jq -r '.taskDefinition.taskDefinitionArn')
          
          echo "New task definition ARN: $NEW_TASK_DEF_ARN"
    
          if [ -z "$NEW_TASK_DEF_ARN" ] || [ "$NEW_TASK_DEF_ARN" = "null" ]; then
            echo "ERROR: Failed to register new task definition"
            exit 1
          fi
          
          echo "new_task_def_arn=$NEW_TASK_DEF_ARN" >> $GITHUB_OUTPUT

      - name: Debug - Check task definition ARN
        run: |
          echo "Task Definition ARN: ${{ steps.register.outputs.new_task_def_arn }}"
          if [ -z "${{ steps.register.outputs.new_task_def_arn }}" ]; then
            echo "ERROR: Task Definition ARN is empty!"
            exit 1
          fi

      - name: Stop existing tasks
        run: |
          echo "기존 실행 중인 Task 중단 중..."
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --desired-count 0
          
          echo "기존 Task가 완전히 종료될 때까지 대기..."
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }}

      - name: Deploy new task
        run: |
          echo "새 Task Definition으로 서비스 배포..."
          echo "Using TaskDef: ${{ steps.register.outputs.new_task_def_arn }}"
          aws ecs update-service \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --service ${{ vars.ECS_SERVICE }} \
            --task-definition ${{ steps.register.outputs.new_task_def_arn }} \
            --desired-count 1 \
            --force-new-deployment

      - name: Wait for ECS service to stabilize
        run: |
          echo "새 Task 시작 대기 중..."
          aws ecs wait services-stable \
            --cluster ${{ vars.ECS_CLUSTER }} \
            --services ${{ vars.ECS_SERVICE }}
        timeout-minutes: 5